# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AMES
else:
    import _AMES

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AMES.delete_SwigPyIterator

    def value(self):
        return _AMES.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AMES.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AMES.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AMES.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AMES.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AMES.SwigPyIterator_copy(self)

    def next(self):
        return _AMES.SwigPyIterator_next(self)

    def __next__(self):
        return _AMES.SwigPyIterator___next__(self)

    def previous(self):
        return _AMES.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AMES.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AMES.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AMES.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AMES.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AMES.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AMES.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AMES.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AMES:
_AMES.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AMES.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AMES.IntVector___nonzero__(self)

    def __bool__(self):
        return _AMES.IntVector___bool__(self)

    def __len__(self):
        return _AMES.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _AMES.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AMES.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AMES.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AMES.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AMES.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AMES.IntVector___setitem__(self, *args)

    def pop(self):
        return _AMES.IntVector_pop(self)

    def append(self, x):
        return _AMES.IntVector_append(self, x)

    def empty(self):
        return _AMES.IntVector_empty(self)

    def size(self):
        return _AMES.IntVector_size(self)

    def swap(self, v):
        return _AMES.IntVector_swap(self, v)

    def begin(self):
        return _AMES.IntVector_begin(self)

    def end(self):
        return _AMES.IntVector_end(self)

    def rbegin(self):
        return _AMES.IntVector_rbegin(self)

    def rend(self):
        return _AMES.IntVector_rend(self)

    def clear(self):
        return _AMES.IntVector_clear(self)

    def get_allocator(self):
        return _AMES.IntVector_get_allocator(self)

    def pop_back(self):
        return _AMES.IntVector_pop_back(self)

    def erase(self, *args):
        return _AMES.IntVector_erase(self, *args)

    def __init__(self, *args):
        _AMES.IntVector_swiginit(self, _AMES.new_IntVector(*args))

    def push_back(self, x):
        return _AMES.IntVector_push_back(self, x)

    def front(self):
        return _AMES.IntVector_front(self)

    def back(self):
        return _AMES.IntVector_back(self)

    def assign(self, n, x):
        return _AMES.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _AMES.IntVector_resize(self, *args)

    def insert(self, *args):
        return _AMES.IntVector_insert(self, *args)

    def reserve(self, n):
        return _AMES.IntVector_reserve(self, n)

    def capacity(self):
        return _AMES.IntVector_capacity(self)
    __swig_destroy__ = _AMES.delete_IntVector

# Register IntVector in _AMES:
_AMES.IntVector_swigregister(IntVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AMES.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AMES.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _AMES.DoubleVector___bool__(self)

    def __len__(self):
        return _AMES.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _AMES.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AMES.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AMES.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AMES.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AMES.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AMES.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _AMES.DoubleVector_pop(self)

    def append(self, x):
        return _AMES.DoubleVector_append(self, x)

    def empty(self):
        return _AMES.DoubleVector_empty(self)

    def size(self):
        return _AMES.DoubleVector_size(self)

    def swap(self, v):
        return _AMES.DoubleVector_swap(self, v)

    def begin(self):
        return _AMES.DoubleVector_begin(self)

    def end(self):
        return _AMES.DoubleVector_end(self)

    def rbegin(self):
        return _AMES.DoubleVector_rbegin(self)

    def rend(self):
        return _AMES.DoubleVector_rend(self)

    def clear(self):
        return _AMES.DoubleVector_clear(self)

    def get_allocator(self):
        return _AMES.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _AMES.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _AMES.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _AMES.DoubleVector_swiginit(self, _AMES.new_DoubleVector(*args))

    def push_back(self, x):
        return _AMES.DoubleVector_push_back(self, x)

    def front(self):
        return _AMES.DoubleVector_front(self)

    def back(self):
        return _AMES.DoubleVector_back(self)

    def assign(self, n, x):
        return _AMES.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _AMES.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _AMES.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _AMES.DoubleVector_reserve(self, n)

    def capacity(self):
        return _AMES.DoubleVector_capacity(self)
    __swig_destroy__ = _AMES.delete_DoubleVector

# Register DoubleVector in _AMES:
_AMES.DoubleVector_swigregister(DoubleVector)

class VecVecdouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AMES.VecVecdouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AMES.VecVecdouble___nonzero__(self)

    def __bool__(self):
        return _AMES.VecVecdouble___bool__(self)

    def __len__(self):
        return _AMES.VecVecdouble___len__(self)

    def __getslice__(self, i, j):
        return _AMES.VecVecdouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AMES.VecVecdouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AMES.VecVecdouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AMES.VecVecdouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AMES.VecVecdouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AMES.VecVecdouble___setitem__(self, *args)

    def pop(self):
        return _AMES.VecVecdouble_pop(self)

    def append(self, x):
        return _AMES.VecVecdouble_append(self, x)

    def empty(self):
        return _AMES.VecVecdouble_empty(self)

    def size(self):
        return _AMES.VecVecdouble_size(self)

    def swap(self, v):
        return _AMES.VecVecdouble_swap(self, v)

    def begin(self):
        return _AMES.VecVecdouble_begin(self)

    def end(self):
        return _AMES.VecVecdouble_end(self)

    def rbegin(self):
        return _AMES.VecVecdouble_rbegin(self)

    def rend(self):
        return _AMES.VecVecdouble_rend(self)

    def clear(self):
        return _AMES.VecVecdouble_clear(self)

    def get_allocator(self):
        return _AMES.VecVecdouble_get_allocator(self)

    def pop_back(self):
        return _AMES.VecVecdouble_pop_back(self)

    def erase(self, *args):
        return _AMES.VecVecdouble_erase(self, *args)

    def __init__(self, *args):
        _AMES.VecVecdouble_swiginit(self, _AMES.new_VecVecdouble(*args))

    def push_back(self, x):
        return _AMES.VecVecdouble_push_back(self, x)

    def front(self):
        return _AMES.VecVecdouble_front(self)

    def back(self):
        return _AMES.VecVecdouble_back(self)

    def assign(self, n, x):
        return _AMES.VecVecdouble_assign(self, n, x)

    def resize(self, *args):
        return _AMES.VecVecdouble_resize(self, *args)

    def insert(self, *args):
        return _AMES.VecVecdouble_insert(self, *args)

    def reserve(self, n):
        return _AMES.VecVecdouble_reserve(self, n)

    def capacity(self):
        return _AMES.VecVecdouble_capacity(self)
    __swig_destroy__ = _AMES.delete_VecVecdouble

# Register VecVecdouble in _AMES:
_AMES.VecVecdouble_swigregister(VecVecdouble)

class Particle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AMES.Particle_swiginit(self, _AMES.new_Particle(*args))
    __swig_destroy__ = _AMES.delete_Particle

    def getID(self):
        return _AMES.Particle_getID(self)

    def getName(self):
        return _AMES.Particle_getName(self)

    def getMass(self):
        return _AMES.Particle_getMass(self)

    def getChargeNumber(self):
        return _AMES.Particle_getChargeNumber(self)

    def getMassNumber(self):
        return _AMES.Particle_getMassNumber(self)

    def getMomentum(self):
        return _AMES.Particle_getMomentum(self)

    def getMomentumbin(self):
        return _AMES.Particle_getMomentumbin(self)

    def getMomentumghost(self):
        return _AMES.Particle_getMomentumghost(self)

    def getEnergy(self):
        return _AMES.Particle_getEnergy(self)

    def getEnergybin(self):
        return _AMES.Particle_getEnergybin(self)

    def getSpectrum(self, *args):
        return _AMES.Particle_getSpectrum(self, *args)

    def getLosstime(self):
        return _AMES.Particle_getLosstime(self)

    def getIntetime(self):
        return _AMES.Particle_getIntetime(self)

    def getOptdepth(self):
        return _AMES.Particle_getOptdepth(self)

    def getTemp(self):
        return _AMES.Particle_getTemp(self)

    def getSpectraInj(self):
        return _AMES.Particle_getSpectraInj(self)

    def getSpectraCut(self):
        return _AMES.Particle_getSpectraCut(self)

    def getSpectraIndex(self):
        return _AMES.Particle_getSpectraIndex(self)

    def getSize(self):
        return _AMES.Particle_getSize(self)

    def setID(self, _ID):
        return _AMES.Particle_setID(self, _ID)

    def setName(self, _name):
        return _AMES.Particle_setName(self, _name)

    def setMass(self, _mass):
        return _AMES.Particle_setMass(self, _mass)

    def setCharge(self, _Z):
        return _AMES.Particle_setCharge(self, _Z)

    def setMassNumber(self, _A):
        return _AMES.Particle_setMassNumber(self, _A)

    def setMomentum(self, *args):
        return _AMES.Particle_setMomentum(self, *args)

    def getIndex(self, value):
        return _AMES.Particle_getIndex(self, value)

    def setEnergy(self, _p_num, _p_min, _p_max):
        return _AMES.Particle_setEnergy(self, _p_num, _p_min, _p_max)

    def setSpectrum(self, *args):
        return _AMES.Particle_setSpectrum(self, *args)

    def setSpectrumPL(self, p_inj, p_cut, index, norm, norm_type):
        return _AMES.Particle_setSpectrumPL(self, p_inj, p_cut, index, norm, norm_type)

    def setSpectrumPLwExp(self, _p_inj, _p_cut, _index, norm, norm_type):
        return _AMES.Particle_setSpectrumPLwExp(self, _p_inj, _p_cut, _index, norm, norm_type)

    def setSpectrumPLNoExp(self, p_inj, p_cut, index, norm, norm_type):
        return _AMES.Particle_setSpectrumPLNoExp(self, p_inj, p_cut, index, norm, norm_type)

    def setSpectrumBPL(self, p_inj, p_break, p_cut, index_l, index_h, norm, norm_type):
        return _AMES.Particle_setSpectrumBPL(self, p_inj, p_break, p_cut, index_l, index_h, norm, norm_type)

    def setSpectrumBPLNoExp(self, p_inj, p_break, p_cut, index_l, index_h, norm, norm_type):
        return _AMES.Particle_setSpectrumBPLNoExp(self, p_inj, p_break, p_cut, index_l, index_h, norm, norm_type)

    def setSpectrumDelta(self, *args):
        return _AMES.Particle_setSpectrumDelta(self, *args)

    def setSpectrumMono(self, value):
        return _AMES.Particle_setSpectrumMono(self, value)

    def setEnergySpectrumPL(self, _p_inj, _p_cut, _index, norm, norm_type):
        return _AMES.Particle_setEnergySpectrumPL(self, _p_inj, _p_cut, _index, norm, norm_type)

    def setEnergySpectrumBPL(self, p_inj, p_break, p_cut, index_l, index_h, norm, norm_type):
        return _AMES.Particle_setEnergySpectrumBPL(self, p_inj, p_break, p_cut, index_l, index_h, norm, norm_type)

    def clear(self):
        return _AMES.Particle_clear(self)

    def setTemp(self, i, value):
        return _AMES.Particle_setTemp(self, i, value)

    def setLosstime(self, i, value):
        return _AMES.Particle_setLosstime(self, i, value)

    def setOptdepth(self, i, value):
        return _AMES.Particle_setOptdepth(self, i, value)

    def Momentum2Energy(self, *args):
        return _AMES.Particle_Momentum2Energy(self, *args)

    def Energy2Momentum(self, *args):
        return _AMES.Particle_Energy2Momentum(self, *args)

    def InterpolateOptdepth(self, value):
        return _AMES.Particle_InterpolateOptdepth(self, value)

    def Interpolate(self, *args):
        return _AMES.Particle_Interpolate(self, *args)

# Register Particle in _AMES:
_AMES.Particle_swigregister(Particle)

class Param(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setName(self, _name):
        return _AMES.Param_setName(self, _name)

    def setGeometry(self, _geometry):
        return _AMES.Param_setGeometry(self, _geometry)

    def setRedshift(self, _redshift):
        return _AMES.Param_setRedshift(self, _redshift)

    def setLumDistance(self, _lum_distance):
        return _AMES.Param_setLumDistance(self, _lum_distance)

    def setMagStrength(self, _mag_strength):
        return _AMES.Param_setMagStrength(self, _mag_strength)

    def setEmissionRadius(self, _emission_radius):
        return _AMES.Param_setEmissionRadius(self, _emission_radius)

    def setEmissionVolume(self, _emission_volume):
        return _AMES.Param_setEmissionVolume(self, _emission_volume)

    def setAmbientDensity(self, _ambient_density):
        return _AMES.Param_setAmbientDensity(self, _ambient_density)

    def setDynamicalTime(self, _dynamical_time):
        return _AMES.Param_setDynamicalTime(self, _dynamical_time)

    def setDopplerFactor(self, _doppler_factor):
        return _AMES.Param_setDopplerFactor(self, _doppler_factor)

    def setLorentzFactor(self, _lorentz_factor):
        return _AMES.Param_setLorentzFactor(self, _lorentz_factor)

    def setObsAngle(self, _obs_angle):
        return _AMES.Param_setObsAngle(self, _obs_angle)

    def setVelocity(self, _velocity):
        return _AMES.Param_setVelocity(self, _velocity)

    def getName(self):
        return _AMES.Param_getName(self)

    def getGeometry(self):
        return _AMES.Param_getGeometry(self)

    def getRedshift(self):
        return _AMES.Param_getRedshift(self)

    def getLumDistance(self):
        return _AMES.Param_getLumDistance(self)

    def getMagStrength(self):
        return _AMES.Param_getMagStrength(self)

    def getEmissionRadius(self):
        return _AMES.Param_getEmissionRadius(self)

    def getEmissionVolume(self):
        return _AMES.Param_getEmissionVolume(self)

    def getAmbientDensity(self):
        return _AMES.Param_getAmbientDensity(self)

    def getDopplerFactor(self):
        return _AMES.Param_getDopplerFactor(self)

    def getVelocity(self):
        return _AMES.Param_getVelocity(self)

    def __init__(self):
        _AMES.Param_swiginit(self, _AMES.new_Param())
    __swig_destroy__ = _AMES.delete_Param

# Register Param in _AMES:
_AMES.Param_swigregister(Param)

class Source(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AMES.Source_swiginit(self, _AMES.new_Source(*args))

    def setParticle(self):
        return _AMES.Source_setParticle(self)

    def setParam(self):
        return _AMES.Source_setParam(self)

    def setNucleus(self, mass_number, charge_number):
        return _AMES.Source_setNucleus(self, mass_number, charge_number)

    def showParam(self):
        return _AMES.Source_showParam(self)

    def getPhoton(self):
        return _AMES.Source_getPhoton(self)

    def getTarget(self):
        return _AMES.Source_getTarget(self)

    def getElectron(self):
        return _AMES.Source_getElectron(self)

    def getNeutrino(self):
        return _AMES.Source_getNeutrino(self)

    def getPionplus(self):
        return _AMES.Source_getPionplus(self)

    def getPionminus(self):
        return _AMES.Source_getPionminus(self)

    def getPionzero(self):
        return _AMES.Source_getPionzero(self)

    def getMuonminusL(self):
        return _AMES.Source_getMuonminusL(self)

    def getMuonminusR(self):
        return _AMES.Source_getMuonminusR(self)

    def getMuonplusL(self):
        return _AMES.Source_getMuonplusL(self)

    def getMuonplusR(self):
        return _AMES.Source_getMuonplusR(self)

    def getProton(self):
        return _AMES.Source_getProton(self)

    def getNeutron(self):
        return _AMES.Source_getNeutron(self)

    def getNucleus(self):
        return _AMES.Source_getNucleus(self)

    def getParam(self):
        return _AMES.Source_getParam(self)
    __swig_destroy__ = _AMES.delete_Source

# Register Source in _AMES:
_AMES.Source_swigregister(Source)

class Cosmology(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _AMES.Cosmology_swiginit(self, _AMES.new_Cosmology())

    def Redshift2LuminosityDistance(self, z):
        return _AMES.Cosmology_Redshift2LuminosityDistance(self, z)

    def Redshift2ComovingDistance(self, z):
        return _AMES.Cosmology_Redshift2ComovingDistance(self, z)

    def Redshift2LighttravelDistance(self, z):
        return _AMES.Cosmology_Redshift2LighttravelDistance(self, z)

    def HubbleDistance(self):
        return _AMES.Cosmology_HubbleDistance(self)

    @staticmethod
    def Ez(z):
        return _AMES.Cosmology_Ez(z)
    __swig_destroy__ = _AMES.delete_Cosmology

# Register Cosmology in _AMES:
_AMES.Cosmology_swigregister(Cosmology)

def Cosmology_Ez(z):
    return _AMES.Cosmology_Ez(z)

class Photonbackground(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s):
        _AMES.Photonbackground_swiginit(self, _AMES.new_Photonbackground(s))

    def GreyBody(self, T_ph, u_ph):
        return _AMES.Photonbackground_GreyBody(self, T_ph, u_ph)

    def BlackBody(self, T_ph):
        return _AMES.Photonbackground_BlackBody(self, T_ph)

    def Powerlaw(self, eps_min, eps_max, index, u_ph):
        return _AMES.Photonbackground_Powerlaw(self, eps_min, eps_max, index, u_ph)

    def BrokenPowerlaw(self, eps_min, eps_break, eps_max, index_1, index_2, u_ph):
        return _AMES.Photonbackground_BrokenPowerlaw(self, eps_min, eps_break, eps_max, index_1, index_2, u_ph)

    def CMB(self, redshift):
        return _AMES.Photonbackground_CMB(self, redshift)

    def EBL(self, *args):
        return _AMES.Photonbackground_EBL(self, *args)

    def EBLTau(self, *args):
        return _AMES.Photonbackground_EBLTau(self, *args)

    def EBLAttenuation(self, photon_energy, photon_spectrum):
        return _AMES.Photonbackground_EBLAttenuation(self, photon_energy, photon_spectrum)

    def EBL_Franceschini08(self, *args):
        return _AMES.Photonbackground_EBL_Franceschini08(self, *args)

    def EBL_Gilmore12(self, *args):
        return _AMES.Photonbackground_EBL_Gilmore12(self, *args)

    def EBL_Finke10(self, *args):
        return _AMES.Photonbackground_EBL_Finke10(self, *args)

    def setOutputFile(self, _output_file):
        return _AMES.Photonbackground_setOutputFile(self, _output_file)
    __swig_destroy__ = _AMES.delete_Photonbackground

# Register Photonbackground in _AMES:
_AMES.Photonbackground_swigregister(Photonbackground)

class Synchrotron(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s):
        _AMES.Synchrotron_swiginit(self, _AMES.new_Synchrotron(s))

    def Losstime(self, *args):
        return _AMES.Synchrotron_Losstime(self, *args)

    def Emissivity(self, *args):
        return _AMES.Synchrotron_Emissivity(self, *args)

    def Spec(self, mag_strength, primary_energy, secondary_energy):
        return _AMES.Synchrotron_Spec(self, mag_strength, primary_energy, secondary_energy)
    spec = property(_AMES.Synchrotron_spec_get, _AMES.Synchrotron_spec_set)

    def Test(self):
        return _AMES.Synchrotron_Test(self)
    __swig_destroy__ = _AMES.delete_Synchrotron

# Register Synchrotron in _AMES:
_AMES.Synchrotron_swigregister(Synchrotron)

class InverseCompton(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s):
        _AMES.InverseCompton_swiginit(self, _AMES.new_InverseCompton(s))

    def Losstime(self, *args):
        return _AMES.InverseCompton_Losstime(self, *args)

    def Intetime(self):
        return _AMES.InverseCompton_Intetime(self)

    def Spec(self, primary_energy, secondary_energy, target_energy, target_spectrum):
        return _AMES.InverseCompton_Spec(self, primary_energy, secondary_energy, target_energy, target_spectrum)

    def Emissivity(self, *args):
        return _AMES.InverseCompton_Emissivity(self, *args)

    def Table(self):
        return _AMES.InverseCompton_Table(self)
    spec = property(_AMES.InverseCompton_spec_get, _AMES.InverseCompton_spec_set)

    def Test(self):
        return _AMES.InverseCompton_Test(self)
    __swig_destroy__ = _AMES.delete_InverseCompton

# Register InverseCompton in _AMES:
_AMES.InverseCompton_swigregister(InverseCompton)

class GammaGamma(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s):
        _AMES.GammaGamma_swiginit(self, _AMES.new_GammaGamma(s))

    def Losstime(self, *args):
        return _AMES.GammaGamma_Losstime(self, *args)

    def Intetime(self, *args):
        return _AMES.GammaGamma_Intetime(self, *args)

    def Spec(self, primary_energy, secondary_energy, target_energy, target_spectrum):
        return _AMES.GammaGamma_Spec(self, primary_energy, secondary_energy, target_energy, target_spectrum)

    def Table(self):
        return _AMES.GammaGamma_Table(self)

    def Table_Lee1998(self):
        return _AMES.GammaGamma_Table_Lee1998(self)

    def Table_Zdziarski1988(self):
        return _AMES.GammaGamma_Table_Zdziarski1988(self)
    spec = property(_AMES.GammaGamma_spec_get, _AMES.GammaGamma_spec_set)

    def Test(self):
        return _AMES.GammaGamma_Test(self)
    __swig_destroy__ = _AMES.delete_GammaGamma

# Register GammaGamma in _AMES:
_AMES.GammaGamma_swigregister(GammaGamma)

class ElectronDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s):
        _AMES.ElectronDistribution_swiginit(self, _AMES.new_ElectronDistribution(s))

    def IterationSolutionSteadyState(self, syn, IC, have_EIC=False, t_dyn=1e10, t_esc_photon=1e10):
        return _AMES.ElectronDistribution_IterationSolutionSteadyState(self, syn, IC, have_EIC, t_dyn, t_esc_photon)

    def IterationSolution(self, syn, IC, have_EIC=False, t_dyn=1e10, t_ad=1e10, t_esc_photon=1e10):
        return _AMES.ElectronDistribution_IterationSolution(self, syn, IC, have_EIC, t_dyn, t_ad, t_esc_photon)

    def Test(self):
        return _AMES.ElectronDistribution_Test(self)
    __swig_destroy__ = _AMES.delete_ElectronDistribution

# Register ElectronDistribution in _AMES:
_AMES.ElectronDistribution_swigregister(ElectronDistribution)

class Utility(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _AMES.Utility_swiginit(self, _AMES.new_Utility())

    def Integrate(self, *args):
        return _AMES.Utility_Integrate(self, *args)

    def Interpolate(self, x, y, value):
        return _AMES.Utility_Interpolate(self, x, y, value)
    __swig_destroy__ = _AMES.delete_Utility

# Register Utility in _AMES:
_AMES.Utility_swigregister(Utility)

class GRBAfterglow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s):
        _AMES.GRBAfterglow_swiginit(self, _AMES.new_GRBAfterglow(s))

    def help(self):
        return _AMES.GRBAfterglow_help(self)

    def setGRBAfterglowParam(self, _param):
        return _AMES.GRBAfterglow_setGRBAfterglowParam(self, _param)

    def setOutputFolder(self, _output_folder):
        return _AMES.GRBAfterglow_setOutputFolder(self, _output_folder)

    def haveOneZone(self, _have_onezeon):
        return _AMES.GRBAfterglow_haveOneZone(self, _have_onezeon)

    def haveEdgeEffect(self, _have_edge_effect):
        return _AMES.GRBAfterglow_haveEdgeEffect(self, _have_edge_effect)

    def haveSSCSpec(self, _have_SSCSpec):
        return _AMES.GRBAfterglow_haveSSCSpec(self, _have_SSCSpec)

    def haveAttenuSSA(self, _have_attenu_SSA):
        return _AMES.GRBAfterglow_haveAttenuSSA(self, _have_attenu_SSA)

    def haveAttenuFF(self, _have_attenu_FF):
        return _AMES.GRBAfterglow_haveAttenuFF(self, _have_attenu_FF)

    def haveAttenuGGSource(self, _have_attenu_GG_source):
        return _AMES.GRBAfterglow_haveAttenuGGSource(self, _have_attenu_GG_source)

    def haveAttenuGGCosmic(self, _have_attenu_GG_cosmic):
        return _AMES.GRBAfterglow_haveAttenuGGCosmic(self, _have_attenu_GG_cosmic)

    def Flux(self, time_array, energy_array_min, energy_array_max):
        return _AMES.GRBAfterglow_Flux(self, time_array, energy_array_min, energy_array_max)
    __swig_destroy__ = _AMES.delete_GRBAfterglow

# Register GRBAfterglow in _AMES:
_AMES.GRBAfterglow_swigregister(GRBAfterglow)


cvar = _AMES.cvar
Kpc = cvar.Kpc
Mpc = cvar.Mpc
Gpc = cvar.Gpc
pc = cvar.pc
PI = cvar.PI
c_cnst = cvar.c_cnst
e_cnst = cvar.e_cnst
e_charge = cvar.e_charge
e_mass = cvar.e_mass
pion_mass = cvar.pion_mass
proton_mass = cvar.proton_mass
neutron_mass = cvar.neutron_mass
neutron_Life = cvar.neutron_Life
sigmaT = cvar.sigmaT
hbar_cnst = cvar.hbar_cnst
yr = cvar.yr
days = cvar.days
mp = cvar.mp
me = cvar.me
eV2erg = cvar.eV2erg
erg2eV = cvar.erg2eV
eV2Hz = cvar.eV2Hz
Hz2eV = cvar.Hz2eV
erg2Jy = cvar.erg2Jy
Jy2erg = cvar.Jy2erg
CMBtemp = cvar.CMBtemp
h_Planck = cvar.h_Planck
k_B = cvar.k_B
T_CMB = cvar.T_CMB

